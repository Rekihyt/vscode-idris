{
  "name": "Idris",
  "description": "Idris Language Support for Visual Studio Code",
  "version": "0.3.9",
  "publisher": "zjhmale",
  "engines": {
    "vscode": "^1.8.0"
  },
  "icon": "images/idris.png",
  "keywords": [
    "language",
    "idris",
    "highlight",
    "syntax",
    "snippets"
  ],
  "license": "BSD",
  "homepage": "https://github.com/zjhmale/vscode-idris",
  "repository": {
    "type": "git",
    "url": "https://github.com/zjhmale/vscode-idris.git"
  },
  "bugs": {
    "url": "https://github.com/zjhmale/vscode-idris/issues",
    "email": "zjhmale@gmail.com"
  },
  "categories": [
    "Languages",
    "Snippets"
  ],
  "activationEvents": [
    "onLanguage:idris"
  ],
  "main": "./out/extension",
  "contributes": {
    "languages": [
      {
        "id": "idris",
        "aliases": [
          "Idris",
          "idris"
        ],
        "extensions": [
          ".idr",
          ".lidr"
        ],
        "configuration": "./configs/idris.json"
      },
      {
        "id": "ipkg",
        "aliases": [
          "Ipkg",
          "ipkg"
        ],
        "extensions": [
          ".ipkg"
        ]
      }
    ],
    "grammars": [
      {
        "language": "idris",
        "scopeName": "source.idris",
        "path": "./syntaxes/idris.json"
      },
      {
        "language": "ipkg",
        "scopeName": "source.ipkg",
        "path": "./syntaxes/ipkg.json"
      }
    ],
    "configuration": {
      "type": "object",
      "title": "Settings for Idris project",
      "properties": {
        "idris.executablePath": {
          "type": "string",
          "default": "idris",
          "description": "The full path to the idris executable."
        },
        "idris.hoverMode": {
          "type": "string",
          "enum": [
            "info",
            "type",
            "fallback",
            "none"
          ],
          "default": "fallback",
          "description": "Controls the hover behavior. 'info' will display Idris documentation, 'type' will display Idris type, 'fallback' will try 'info' first and fallback to 'type' if we can not get the documentation, and 'none' will disable hover tooltips."
        },
        "idris.suggestMode": {
          "type": "string",
          "enum": [
            "allWords",
            "replCompletion"
          ],
          "default": "allWords",
          "description": "Controls the auto-completion behavior. 'allWords' will include all words from the current document, 'replCompletion' will get suggestions from Idris REPL process."
        }
      }
    },
    "menus": {
      "editor/context": [
        {
          "command": "idris.typecheck",
          "when": "editorFocus && editorLangId == idris",
          "group": "idris@1"
        },
        {
          "command": "idris.type-of",
          "when": "editorFocus && editorLangId == idris",
          "group": "idris@2"
        },
        {
          "command": "idris.docs-for",
          "when": "editorFocus && editorLangId == idris",
          "group": "idris@3"
        },
        {
          "command": "idris.print-definition",
          "when": "editorFocus && editorLangId == idris",
          "group": "idris@4"
        },
        {
          "command": "idris.add-clause",
          "when": "editorFocus && editorLangId == idris",
          "group": "idris@5"
        },
        {
          "command": "idris.case-split",
          "when": "editorFocus && editorLangId == idris",
          "group": "idris@6"
        },
        {
          "command": "idris.proof-search",
          "when": "editorFocus && editorLangId == idris",
          "group": "idris@7"
        },
        {
          "command": "idris.make-with",
          "when": "editorFocus && editorLangId == idris",
          "group": "idris@8"
        },
        {
          "command": "idris.make-case",
          "when": "editorFocus && editorLangId == idris",
          "group": "idris@9"
        },
        {
          "command": "idris.make-lemma",
          "when": "editorFocus && editorLangId == idris",
          "group": "idris@10"
        },
        {
          "command": "idris.eval-selection",
          "when": "editorFocus && editorLangId == idris",
          "group": "idris@11"
        },
        {
          "command": "idris.start-refresh-repl",
          "when": "editorFocus && editorLangId == idris",
          "group": "idris@12"
        },
        {
          "command": "idris.send-selection-repl",
          "when": "editorFocus && editorLangId == idris",
          "group": "idris@13"
        },
        {
          "command": "idris.cleanup-ibc",
          "when": "editorFocus && editorLangId == idris",
          "group": "idris@14"
        }
      ]
    },
    "commands": [
      {
        "command": "idris.typecheck",
        "title": "Typechecking currently opened file",
        "description": "Typecheck file"
      },
      {
        "command": "idris.type-of",
        "title": "Show type of the identifier",
        "description": "Type of identifier"
      },
      {
        "command": "idris.docs-for",
        "title": "Show documentation of the identifier",
        "description": "Docs for identifier"
      },
      {
        "command": "idris.print-definition",
        "title": "Show definition of the identifier",
        "description": "Print definition of identifier"
      },
      {
        "command": "idris.show-holes",
        "title": "List all active holes in currently opened file",
        "description": "Show the currently active holes"
      },
      {
        "command": "idris.add-clause",
        "title": "Generate an initial pattern match clause",
        "description": "Add an initial pattern match clause"
      },
      {
        "command": "idris.case-split",
        "title": "Generate a case split for the pattern variable",
        "description": "Add a case split for the pattern variable"
      },
      {
        "command": "idris.proof-search",
        "title": "Attempt to fill out the hole",
        "description": "Attempt to fill out the holes by proof search"
      },
      {
        "command": "idris.make-with",
        "title": "Create a with rule pattern match template for the clause of function",
        "description": "Make a with rule pattern match template for the clause of function"
      },
      {
        "command": "idris.make-case",
        "title": "Create a case pattern match template for the hole",
        "description": "Make a case pattern match template for holes"
      },
      {
        "command": "idris.make-lemma",
        "title": "Create a top level function with a type which solves the hole under the cursor",
        "description": "Make a top level lemma which solves the hole under the cursor"
      },
      {
        "command": "idris.apropos",
        "title": "Search names, types and documentations",
        "description": "Search names, types, and documentation"
      },
      {
        "command": "idris.eval-selection",
        "title": "Evaluate selected code",
        "description": "Eval current line"
      },
      {
        "command": "idris.start-refresh-repl",
        "title": "Start or Refresh REPL",
        "description": "Start REPL for currently opened file or refresh REPL when opened file is changed"
      },
      {
        "command": "idris.send-selection-repl",
        "title": "Send selected code to REPL",
        "description": "Send selected text to a refreshed REPL with currently opened file"
      },
      {
        "command": "idris.cleanup-ibc",
        "title": "Cleanup idris binary files",
        "description": "Cleanup idris binary files"
      }
    ],
    "keybindings": [
      {
        "key": "shift+ctrl+t",
        "mac": "shift+cmd+t",
        "when": "editorFocus && editorLangId == idris",
        "command": "idris.typecheck"
      },
      {
        "key": "shift+ctrl+o",
        "mac": "shift+cmd+o",
        "when": "editorFocus && editorLangId == idris",
        "command": "idris.type-of"
      },
      {
        "key": "shift+ctrl+d",
        "mac": "shift+cmd+d",
        "when": "editorFocus && editorLangId == idris",
        "command": "idris.docs-for"
      },
      {
        "key": "shift+ctrl+f",
        "mac": "shift+cmd+f",
        "when": "editorFocus && editorLangId == idris",
        "command": "idris.print-definition"
      },
      {
        "key": "shift+ctrl+h",
        "mac": "shift+cmd+h",
        "when": "editorFocus && editorLangId == idris",
        "command": "idris.show-holes"
      },
      {
        "key": "shift+ctrl+a",
        "mac": "shift+cmd+a",
        "when": "editorFocus && editorLangId == idris",
        "command": "idris.add-clause"
      },
      {
        "key": "shift+ctrl+c",
        "mac": "shift+cmd+c",
        "when": "editorFocus && editorLangId == idris",
        "command": "idris.case-split"
      },
      {
        "key": "shift+ctrl+s",
        "mac": "shift+cmd+s",
        "when": "editorFocus && editorLangId == idris",
        "command": "idris.proof-search"
      },
      {
        "key": "shift+ctrl+w",
        "mac": "shift+cmd+w",
        "when": "editorFocus && editorLangId == idris",
        "command": "idris.make-with"
      },
      {
        "key": "shift+ctrl+m",
        "mac": "shift+cmd+m",
        "when": "editorFocus && editorLangId == idris",
        "command": "idris.make-case"
      },
      {
        "key": "shift+ctrl+l",
        "mac": "shift+cmd+l",
        "when": "editorFocus && editorLangId == idris",
        "command": "idris.make-lemma"
      },
      {
        "key": "shift+ctrl+k",
        "mac": "shift+cmd+k",
        "when": "editorFocus && editorLangId == idris",
        "command": "idris.apropos"
      },
      {
        "key": "shift+ctrl+e",
        "mac": "shift+cmd+e",
        "when": "editorFocus && editorLangId == idris",
        "command": "idris.eval-selection"
      },
      {
        "key": "shift+ctrl+r",
        "mac": "shift+cmd+r",
        "when": "editorFocus && editorLangId == idris",
        "command": "idris.start-refresh-repl"
      },
      {
        "key": "shift+ctrl+x",
        "mac": "shift+cmd+x",
        "when": "editorFocus && editorLangId == idris",
        "command": "idris.send-selection-repl"
      },
      {
        "key": "shift+ctrl+u",
        "mac": "shift+cmd+u",
        "when": "editorFocus && editorLangId == idris",
        "command": "idris.cleanup-ibc"
      }
    ],
    "snippets": [
      {
        "language": "idris",
        "path": "./snippets/idris.json"
      }
    ]
  },
  "scripts": {
    "prepublish": "rm -rf out && mkdir out && cp -r ./src/* ./out",
    "postinstall": "node ./node_modules/vscode/bin/install",
    "test": "node ./node_modules/vscode/bin/test"
  },
  "dependencies": {
    "bennu": "17.3.0",
    "nu-stream": "3.3.1",
    "rx-lite": "4.0.0",
    "cson": "4.0.0",
    "eslint-plugin-promise": "3.5.0",
    "request": "2.81.0",
    "chalk": "1.1.3",
    "glob": "7.1.1"
  },
  "devDependencies": {
    "vscode": "^1.0.5"
  }
}